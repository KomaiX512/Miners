#!/usr/bin/env python3
"""
COMPREHENSIVE VULNERABILITY TESTING & QUALITY VERIFICATION
Tests the improved RAG system across all platforms with battle-tested scenarios.
"""

import sys
import json
import time
from datetime import datetime
sys.path.append('/home/komail/Miners-1')

from main import ContentRecommendationSystem

def test_competitor_data_retrieval():
    """Test that competitor data is properly retrievable from vector database."""
    print("=" * 60)
    print("üîç TESTING COMPETITOR DATA RETRIEVAL VULNERABILITY FIX")
    print("=" * 60)
    
    system = ContentRecommendationSystem()
    
    # Test with known competitors that should have been indexed
    competitors_to_test = [
        ("fentybeauty", ["toofaced", "maccosmetics", "narsissist"]),
        ("geoffreyhinton", ["elonmusk", "ylecun", "sama"])
    ]
    
    for primary, competitors in competitors_to_test:
        print(f"\nüéØ Testing competitor retrieval for {primary}")
        print(f"   Competitors: {competitors}")
        
        for competitor in competitors:
            # Test competitor data retrieval
            query_result = system.vector_db.query_similar(
                f"{competitor} competitive analysis", 
                n_results=5, 
                filter_username=competitor, 
                is_competitor=True
            )
            
            docs_found = len(query_result.get('documents', [[]])[0])
            print(f"   üìä {competitor}: {docs_found} documents retrieved")
            
            if docs_found > 0:
                print(f"   ‚úÖ SUCCESS: {competitor} data is retrievable")
                # Show sample metadata
                if query_result.get('metadatas', [[]]):
                    sample_meta = query_result['metadatas'][0][0] if query_result['metadatas'][0] else {}
                    username = sample_meta.get('username', 'unknown')
                    is_competitor = sample_meta.get('is_competitor', False)
                    print(f"   üìã Sample metadata: username={username}, is_competitor={is_competitor}")
            else:
                print(f"   ‚ùå ISSUE: {competitor} data not retrievable (vulnerability still exists)")
    
    return True

def test_rag_content_quality():
    """Test RAG content generation quality and authenticity."""
    print("\n" + "=" * 60)
    print("üé® TESTING RAG CONTENT QUALITY & AUTHENTICITY")
    print("=" * 60)
    
    system = ContentRecommendationSystem()
    
    # Test scenarios across platforms
    test_scenarios = [
        {
            "username": "fentybeauty",
            "platform": "instagram", 
            "account_type": "branding",
            "competitors": ["toofaced", "maccosmetics"]
        },
        {
            "username": "geoffreyhinton",
            "platform": "twitter",
            "account_type": "branding", 
            "competitors": ["elonmusk", "ylecun"]
        }
    ]
    
    for scenario in test_scenarios:
        print(f"\nüéØ Testing RAG quality for {scenario['username']} on {scenario['platform']}")
        
        try:
            # Generate recommendations using improved RAG
            is_branding = scenario['account_type'] == 'branding'
            
            recommendations = system.recommendation_generator.generate_unified_content_plan(
                primary_username=scenario['username'],
                secondary_usernames=scenario['competitors'],
                query=f"{scenario['username']} strategic analysis",
                is_branding=is_branding,
                platform=scenario['platform']
            )
            
            if recommendations:
                print(f"   ‚úÖ RAG Generation: SUCCESS")
                
                # Analyze content quality
                total_content = json.dumps(recommendations)
                content_length = len(total_content)
                print(f"   üìè Content Length: {content_length} chars")
                
                # Check for template indicators
                template_indicators = [
                    "template", "placeholder", "[username]", "[platform]",
                    "moderate engagement", "room for growth", "optimization"
                ]
                
                template_found = any(indicator.lower() in total_content.lower() 
                                   for indicator in template_indicators)
                
                if template_found:
                    print(f"   ‚ö†Ô∏è  WARNING: Template content detected")
                else:
                    print(f"   ‚úÖ Content Authenticity: PASSED")
                
                # Check for competitor analysis
                if 'threat_assessment' in recommendations:
                    comp_analysis = recommendations['threat_assessment']
                    if isinstance(comp_analysis, dict) and 'competitor_analysis' in comp_analysis:
                        comp_count = len(comp_analysis['competitor_analysis'])
                        print(f"   üéØ Competitor Analysis: {comp_count} competitors analyzed")
                    else:
                        print(f"   ‚ùå Competitor Analysis: Missing or malformed")
                else:
                    print(f"   ‚ùå Competitor Analysis: Not found")
                
                # Check recommendations
                if 'tactical_recommendations' in recommendations:
                    rec_count = len(recommendations['tactical_recommendations'])
                    print(f"   üìã Tactical Recommendations: {rec_count} recommendations")
                else:
                    print(f"   ‚ùå Tactical Recommendations: Missing")
                
            else:
                print(f"   ‚ùå RAG Generation: FAILED")
                
        except Exception as e:
            print(f"   ‚ùå ERROR: {str(e)}")
    
    return True

def test_cross_platform_consistency():
    """Test that the system works consistently across all platforms."""
    print("\n" + "=" * 60)
    print("üîÑ TESTING CROSS-PLATFORM CONSISTENCY")
    print("=" * 60)
    
    system = ContentRecommendationSystem()
    
    # Platform-specific test cases
    platform_tests = [
        {
            "platform": "twitter",
            "username": "geoffreyhinton",
            "competitors": ["elonmusk", "sama"]
        },
        {
            "platform": "instagram", 
            "username": "fentybeauty",
            "competitors": ["toofaced", "maccosmetics"]
        },
        {
            "platform": "facebook",
            "username": "netflix", 
            "competitors": ["cocacola", "redbull"]
        }
    ]
    
    results = {}
    
    for test_case in platform_tests:
        platform = test_case['platform']
        username = test_case['username']
        competitors = test_case['competitors']
        
        print(f"\nüéØ Testing {platform.upper()} pipeline")
        print(f"   Primary: {username}")
        print(f"   Competitors: {competitors}")
        
        try:
            start_time = time.time()
            
            if platform == "twitter":
                result = system.process_twitter_username(username, results_limit=10, force_fresh=False)
            elif platform == "instagram":
                result = system.process_instagram_username(username, results_limit=10)
            elif platform == "facebook":
                result = system.process_facebook_username(username, results_limit=10, force_fresh=False)
            
            processing_time = time.time() - start_time
            
            if result:
                results[platform] = {
                    "status": "SUCCESS",
                    "processing_time": processing_time,
                    "username": username,
                    "result_type": type(result).__name__
                }
                print(f"   ‚úÖ SUCCESS: Processing completed in {processing_time:.1f}s")
            else:
                results[platform] = {
                    "status": "FAILED", 
                    "processing_time": processing_time,
                    "username": username,
                    "error": "Returned None/False"
                }
                print(f"   ‚ùå FAILED: Returned None/False")
                
        except Exception as e:
            results[platform] = {
                "status": "ERROR",
                "username": username, 
                "error": str(e)
            }
            print(f"   ‚ùå ERROR: {str(e)}")
    
    # Summary
    print(f"\nüìä CROSS-PLATFORM CONSISTENCY SUMMARY:")
    successful = sum(1 for r in results.values() if r['status'] == 'SUCCESS')
    total = len(results)
    print(f"   Success Rate: {successful}/{total} ({successful/total*100:.1f}%)")
    
    for platform, result in results.items():
        status_emoji = "‚úÖ" if result['status'] == 'SUCCESS' else "‚ùå"
        print(f"   {status_emoji} {platform.upper()}: {result['status']}")
    
    return successful == total

def generate_vulnerability_report():
    """Generate a comprehensive vulnerability assessment report."""
    print("\n" + "=" * 60)
    print("üìä GENERATING COMPREHENSIVE VULNERABILITY REPORT")
    print("=" * 60)
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    report_file = f"/home/komail/Miners-1/vulnerability_test_report_{timestamp}.json"
    
    # Run all tests
    test_results = {
        "timestamp": datetime.now().isoformat(),
        "tests": {
            "competitor_data_retrieval": test_competitor_data_retrieval(),
            "rag_content_quality": test_rag_content_quality(), 
            "cross_platform_consistency": test_cross_platform_consistency()
        }
    }
    
    # Calculate overall health score
    passed_tests = sum(1 for result in test_results['tests'].values() if result)
    total_tests = len(test_results['tests'])
    health_score = (passed_tests / total_tests) * 100
    
    test_results['overall_health_score'] = health_score
    test_results['status'] = "HEALTHY" if health_score >= 80 else "NEEDS_ATTENTION"
    
    # Save report
    with open(report_file, 'w') as f:
        json.dump(test_results, f, indent=2)
    
    print(f"\nüìã VULNERABILITY ASSESSMENT COMPLETE")
    print(f"   Overall Health Score: {health_score:.1f}%")
    print(f"   Status: {test_results['status']}")
    print(f"   Report saved: {report_file}")
    
    return test_results

if __name__ == "__main__":
    print("üöÄ STARTING COMPREHENSIVE VULNERABILITY TESTING")
    print("=" * 80)
    
    # Run comprehensive tests
    final_report = generate_vulnerability_report()
    
    print("\n" + "=" * 80)
    print("üéØ VULNERABILITY TESTING COMPLETE")
    print("=" * 80)
    
    if final_report['overall_health_score'] >= 90:
        print("üéâ EXCELLENT: System is operating at premium quality")
    elif final_report['overall_health_score'] >= 80:
        print("‚úÖ GOOD: System is functioning well with minor optimizations needed")
    else:
        print("‚ö†Ô∏è ATTENTION NEEDED: System requires additional optimization")
